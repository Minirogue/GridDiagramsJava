plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50' //kotlin support
    id 'org.jetbrains.dokka' version '0.10.0' //documentation support. adds dokka task.
}

version 'unreleased'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
dokka {
    //If using a version of java larger than 8 (type java -version on the command line if on Ubuntu),
    // then comment out the next line and uncomment the following line.
    outputFormat = 'javadoc'//only works if using jdk 8
    //outputFormat = 'html-as-java'
    outputDirectory = 'docs'
}
jar {
    manifest {
        attributes 'Main-Class': 'griddiagrams.markovchain.MainKt'
    }
}
tasks.withType(Jar) {
    destinationDirectory = file("$projectDir")
}
sourceSets {
    main {
        java {
            exclude 'griddiagrams/legacy/*'
        }
    }
}

repositories {
    jcenter()
    //maven { url 'https://jitpack.io' }
}
dependencies {
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"

    //Command Line Argument Parser:
    implementation 'net.sourceforge.argparse4j:argparse4j:0.8.1'

    //Testing
    testImplementation 'junit:junit:4.12'

    //To make uber jar
    implementation 'commons-io:commons-io:2.6'

}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


// buildGridMap creates the grid diagram resource required by GridDiagram.getGridDiagramFromResource
task buildGridMap(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'griddiagrams.savegrids'
}

task makeExecutableJar(type: Jar) {
    archiveClassifier = 'exec'

    manifest {
        attributes 'Main-Class': 'griddiagrams.markovchain.MainKt'
    }

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}